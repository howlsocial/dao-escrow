{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "description": "Can be run by the withdrawal address Starts the withdraw process and creates a timestamp of when the funds will be ready for claim the denom_or_address field should match either the CW20 contract corresponding to the token to be withdrawn or the native denom to be withdrawn this can only be executed by the withdrawal_address",
      "type": "object",
      "required": [
        "start_withdraw"
      ],
      "properties": {
        "start_withdraw": {
          "type": "object",
          "required": [
            "amount",
            "denom_or_address"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom_or_address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "When the NATIVE funds are ready to be claimed, this allows them to actually be claimed specify the native denom this can only be executed by the withdrawal_address this also resets the timer once complete",
      "type": "object",
      "required": [
        "execute_native_withdraw"
      ],
      "properties": {
        "execute_native_withdraw": {
          "type": "object",
          "required": [
            "denom"
          ],
          "properties": {
            "denom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "When the CW20 funds are ready to be claimed, this allows them to be claimed takes the address of the CW20 balance to be claimed this can only be executed by the withdrawal_address",
      "type": "object",
      "required": [
        "execute_c_w20_withdraw"
      ],
      "properties": {
        "execute_c_w20_withdraw": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "When any CW20 funds custodied by this contract are claimable, this allows them to be claimed takes the address of the CW20 balance to be claimed this can only be executed by the withdrawal_address",
      "type": "object",
      "required": [
        "execute_escrow_c_w20_withdraw"
      ],
      "properties": {
        "execute_escrow_c_w20_withdraw": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "If a withdrawal is in progress, cancel it this can only be executed by the override_address",
      "type": "object",
      "required": [
        "override_withdraw"
      ],
      "properties": {
        "override_withdraw": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the override_address this can only be executed by the override_address",
      "type": "object",
      "required": [
        "update_override_address"
      ],
      "properties": {
        "update_override_address": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the withdrawal address this can only be executed by the override_address additionally, it can be turned off on instantiate",
      "type": "object",
      "required": [
        "update_withdrawal_address"
      ],
      "properties": {
        "update_withdrawal_address": {
          "type": "object",
          "required": [
            "address"
          ],
          "properties": {
            "address": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a ExecuteMsg",
      "type": "object",
      "required": [
        "amount",
        "msg",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
